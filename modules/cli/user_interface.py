"""
M√≥dulo para la gesti√≥n de la interfaz de usuario en la l√≠nea de comandos.
"""
import argparse
from ..utils.logging import Logger
from ..core.exceptions import XDownloaderException

class UserInterface:
    """
    Gestiona toda la interacci√≥n con el usuario, como mensajes y di√°logos.
    """

    def show_welcome_message(self, profile_url: str, use_automation: bool, use_main: bool, url_limit: int = None):
        """Muestra el mensaje de bienvenida y la configuraci√≥n de la sesi√≥n."""
        Logger.info("üé¨ X Media Downloader - Optimizado para Microsoft Edge")
        print("=" * 60)
        Logger.info(f"üéØ Perfil objetivo: {profile_url}")
        if use_main:
            Logger.info("‚úÖ Usando perfil principal de Edge")
        elif use_automation:
            Logger.info("‚úÖ Usando perfil de automatizaci√≥n")
        else:
            Logger.info("‚úÖ Usando Edge temporal")
        
        if url_limit is not None:
            Logger.info(f"‚ö° L√≠mite de URLs nuevas: {url_limit}")
        
        print("=" * 60)

    def confirm_execution(self, auto_confirm: bool = False) -> bool:
        """Pide al usuario confirmaci√≥n para continuar."""
        if auto_confirm:
            Logger.info("üöÄ Confirmaci√≥n autom√°tica activada - continuando...")
            return True
            
        response = input("üöÄ ¬øContinuar? (s/n): ").lower().strip()
        if response not in ['s', 'si', 's√≠', 'y', 'yes']:
            Logger.warning("Cancelado por el usuario.")
            return False
        return True

    def resolve_browser_mode(self, args: argparse.Namespace) -> tuple[bool, bool]:
        """Determina el modo de navegador a partir de los argumentos o un di√°logo."""
        if args.select:
            return self._show_browser_mode_selection()
        
        use_main_profile = args.main_profile
        use_automation_profile = not use_main_profile and not args.temporal
        
        return use_automation_profile, use_main_profile

    def _show_browser_mode_selection(self) -> tuple[bool, bool]:
        """Muestra un di√°logo para que el usuario seleccione el modo de navegador."""
        print("\n" + "="*20 + " SELECCIONAR MODO DE NAVEGADOR " + "="*20)
        print("1. Perfil de automatizaci√≥n (Recomendado)")
        print("2. Perfil principal de Edge")
        print("3. Edge temporal (requiere login manual)")
        
        choice = input("Selecciona una opci√≥n (1/2/3): ").strip()
        
        if choice == "2":
            return False, True  # (auto, main)
        if choice == "3":
            return False, False # (auto, main)
        
        return True, False # (auto, main) - por defecto

    def show_completion_message(self, stats: dict):
        """Muestra el mensaje final cuando el proceso se completa."""
        Logger.info("\n" + "üèÅ ¬°Proceso completado!" + "üèÅ")
        Logger.success(f"Im√°genes descargadas: {stats.get('downloaded', 0)}")
        Logger.info(f"Im√°genes saltadas: {stats.get('skipped', 0)}")
        Logger.error(f"Errores: {stats.get('errors', 0)}")
        Logger.info("üìä Revisa el JSON generado para ver la clasificaci√≥n completa de medios.")

    def show_error_diagnosis(self, error: Exception):
        """Muestra un diagn√≥stico basado en el tipo de error."""
        Logger.error(f"Ha ocurrido un error: {error}")
        if isinstance(error, XDownloaderException):
            Logger.warning(f"Tipo de error: {type(error).__name__}")
        
        # Aqu√≠ se puede a√±adir l√≥gica de diagn√≥stico m√°s espec√≠fica en el futuro
        import traceback
        traceback.print_exc()